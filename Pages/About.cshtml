@page
@{
    ViewData["Title"] = "System Info";
}
@model SysDetailsModel

@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Http.Features;

@using System.Linq;
@using System.Diagnostics;
@using System.Runtime.Versioning;

@functions {
    public class SysDetailsModel : PageModel
    {
        public string container { get; set; }
        public string host { get; set; }
        public string os { get; set; }
        public string procs { get; set; }
        public string arch { get; set; }
        public string framework { get; set; }
        public string ip { get; set; }
        public string mem { get; set; }
        public Dictionary<string, string> envs = new Dictionary<string, string>();

        public void OnGet()
        {
            container = (System.IO.File.Exists(".insidedocker")) ? "Docker container" : "regular process";
            host = System.Environment.MachineName;
            os = System.Runtime.InteropServices.RuntimeInformation.OSDescription;
            procs = Environment.ProcessorCount.ToString();
            arch = System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture.ToString();
            framework = "Unknown";
            framework = Assembly.GetEntryAssembly()?.GetCustomAttribute<TargetFrameworkAttribute>()?.FrameworkName;
            mem = (System.Diagnostics.Process.GetCurrentProcess().VirtualMemorySize64 / (1024*1024*1024)).ToString();

            var httpConnectionFeature = HttpContext.Features.Get<IHttpConnectionFeature>();
            ip = httpConnectionFeature?.LocalIpAddress.ToString();

            // Harvest a few "interesting" environmental vars which may or may not be present
            var env = Environment.GetEnvironmentVariables().GetEnumerator();
            string[] interesting_envs = {"PROCESSOR_IDENTIFIER", "MACHTYPE", "DOTNET_VERSION", "HOSTTYPE", "PROCESSOR_ARCHITECTURE", "RELEASE", "HOSTNAME", "WEBSITE_SITE_NAME"};
            while (env.MoveNext()) {
                if(interesting_envs.Any(s=>env.Key.ToString().Equals(s))) {
                    envs.Add(env.Key.ToString(), env.Value.ToString());
                }
            } 
        }
    }
}

<h2>@ViewData["Title"]</h2>

<div class="jumbotron transp sysinfo-box">
    <table>
        <tr><td><span class="glyphicon glyphicon-modal-window" aria-hidden="true"></span>&nbsp; Container:</td><td>Running as a @Model.container</td></tr>
        <tr><td><span class="glyphicon glyphicon-home" aria-hidden="true"></span>&nbsp; Hostname:</td><td>@Model.host</td></tr>
        <tr><td><span class="glyphicon glyphicon-globe" aria-hidden="true"></span>&nbsp;  IP Address:</td><td>@Model.ip</td></tr>
        <tr><td><span class="glyphicon glyphicon-eye-open" aria-hidden="true"></span>&nbsp;  Operating system:</td><td>@Model.os</td></tr>
        <tr><td><span class="glyphicon glyphicon-flash" aria-hidden="true"></span>&nbsp;  Processors:</td><td>@Model.procs (@Model.arch)</td></tr>
        <tr><td><span class="glyphicon glyphicon-equalizer" aria-hidden="true"></span>&nbsp;  Memory:</td><td>@Model.mem GB (estimate, probably wrong!)</td></tr>                        
        <tr><td><span class="glyphicon glyphicon-wrench" aria-hidden="true"></span>&nbsp;  Framework:</td><td>@Model.framework</td></tr>                        
        @foreach (var key in Model.envs.Keys) {
            <tr><td><span class="glyphicon glyphicon-ok-circle" aria-hidden="true"></span>&nbsp;  @key:</td><td>@Model.envs[key]</td></tr>    
        }                    
    </table>
</div>